{
  "info": {
    "_postman_id": "b8fda83e-c415-42dd-8369-b27a94879929",
    "name": "Authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "37129851"
  },
  "item": [
    {
      "name": "/users/login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Login API validation\", () => {",
              "    pm.expect(pm.response.code).to.eql(Number(pm.iterationData.get(\"expectedStatus\")));",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "",
              "    const res = pm.response.json();",
              "    if (pm.response.code === 200) {",
              "        pm.expect(res).to.have.property(\"access_token\").that.matches(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_.+/=]*$/);",
              "        pm.expect(String(res.token_type).toLowerCase()).to.eql(\"bearer\");",
              "        pm.expect(res.expires_in).to.be.a(\"number\").and.to.be.above(0);",
              "    } else {",
              "        pm.expect(res).to.have.property(\"error\").that.is.a(\"string\").and.not.empty;",
              "    }",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const api = pm.iterationData.get(\"api\");",
              "// Nếu không phải API login thì bỏ qua",
              "if (api !== \"login\") {",
              "console.log(`Skip because api != login`);",
              "pm.execution.skipRequest();",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{email}}\",\n    \"password\":\"{{password}}\"   \n}"
        },
        "url": {
          "raw": "{{baseURL}}/users/login",
          "host": ["{{baseURL}}"],
          "path": ["users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "/users/register",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "function checkPassword(password) {",
              "    const hasUppercase = /[A-Z]/.test(password);",
              "    const hasLowercase = /[a-z]/.test(password);",
              "    const hasSpecial   = /[^A-Za-z0-9]/.test(password);",
              "    const hasMinLength = password.length >= 8;",
              "",
              "    return hasUppercase && hasLowercase && hasSpecial && hasMinLength;",
              "}",
              "",
              "pm.test(\"Register API validation\", () => {",
              "    pm.expect(pm.response.code).to.eql(Number(pm.iterationData.get(\"expectedStatus\")));",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "",
              "    const res = pm.response.json();",
              "    if (pm.response.code === 201) {",
              "        pm.expect(res).to.have.property(\"id\").that.is.a(\"number\");",
              "        const password = pm.iterationData.get(\"password\");",
              "",
              "        pm.expect(checkPassword(password), ",
              "            \"Password must have uppercase, lowercase, special char, and min 8 length\"",
              "        ).to.be.true;",
              "    } else {   ",
              "        pm.expect(res).to.be.an(\"object\");",
              "       ",
              "        Object.values(res).forEach(fieldErrors => {",
              "            pm.expect(fieldErrors).to.be.an(\"array\");",
              "            pm.expect(fieldErrors[0]).to.be.a(\"string\").that.is.not.empty;",
              "        });",
              "    }",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const api = pm.iterationData.get(\"api\");",
              "// Nếu không phải API register thì bỏ qua",
              "if (api !== \"register\") {",
              "console.log(`Skip because api != register`);",
              "pm.execution.skipRequest();",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"first_name\": \"{{first_name}}\",\n    \"last_name\": \"{{last_name}}\",\n    \"address\": \"{{address}}\",\n    \"city\": \"{{city}}\",\n    \"state\": \"{{state}}\",\n    \"country\": \"{{country}}\",\n    \"postcode\": \"{{postcode}}\",\n    \"phone\": \"{{phone}}\",\n    \"dob\": \"{{dob}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseURL}}/users/register",
          "host": ["{{baseURL}}"],
          "path": ["users", "register"]
        }
      },
      "response": []
    },
    {
      "name": "/users/forgot-password",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Forgot Password API validation\", () => {",
              "    pm.expect(pm.response.code).to.eql(Number(pm.iterationData.get(\"expectedStatus\")));",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "    const res = pm.response.json();",
              "    if (pm.response.code === 200) {",
              "        pm.expect(res).to.have.property(\"success\").that.is.a(\"boolean\");",
              "        pm.expect(pm.iterationData.get(\"emailSent\")).to.be.true;",
              "    } else {",
              "        pm.expect(res).to.have.property(\"error\").that.is.a(\"string\").and.not.empty;",
              "    }",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const api = pm.iterationData.get(\"api\");",
              "// Nếu không phải API forgotpassword thì bỏ qua",
              "if (api !== \"forgotpassword\") {",
              "console.log(`Skip because api != forgotpassword`);",
              "pm.execution.skipRequest();",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\":\"{{email}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseURL}}/users/forgot-password",
          "host": ["{{baseURL}}"],
          "path": ["users", "forgot-password"]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseURL",
      "value": "http://localhost:8091"
    }
  ]
}
